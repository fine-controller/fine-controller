name: build

env:
  NAME: fine-kube-operator

on:

  workflow_dispatch:

  push:
    branches:
      - main
      - develop

  pull_request:
    types:
      - opened
      - synchronize
      - reopened

jobs:

  build:
    name: build
    runs-on: ubuntu-latest
    steps:

      - name: Code checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Get Current Time
        uses: josStorer/get-current-time@v2.0.2
        id: current-time
        with:
          format: YYYY.MM.DD.HHmm
          utcOffset: "+00:00"

      - name: Set Vars
        uses: trevorlloydelliott/set-environment-variables@v1.0.0
        with:
          REGISTRY_IMAGE: fortunen/${{ env.NAME }}
          BUILD_NUMBER: ${{ steps.current-time.outputs.formattedTime }}
      
      # - name: Set up JDK 11
      #   uses: actions/setup-java@v3
      #   with:
      #     java-version: 11
      #     distribution: zulu

      # - name: Cache SonarCloud packages
      #   uses: actions/cache@v3
      #   with:
      #     path: ~\sonar\cache
      #     key: ${{ runner.os }}-sonar
      #     restore-keys: ${{ runner.os }}-sonar

      # - name: Cache SonarCloud scanner
      #   id: cache-sonar-scanner
      #   uses: actions/cache@v3
      #   with:
      #     path: .\.sonar\scanner
      #     key: ${{ runner.os }}-sonar-scanner
      #     restore-keys: ${{ runner.os }}-sonar-scanner

      # - name: Install SonarCloud scanner
      #   if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
      #   run: |
      #     New-Item -Path .\.sonar\scanner -ItemType Directory
      #     dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner

      # - name: Analyze using SonarCloud
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      #   run: |
      #     .\.sonar\scanner\dotnet-sonarscanner begin /d:sonar.login="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io" /k:"${{ env.NAME }}" /o:"${{ env.NAME }}" /d:sonar.cs.opencover.reportsPaths="**/TestResults/*/coverage.opencover.xml"
      #     dotnet test FineKubeOperator.sln --collect:"XPlat Code Coverage;Format=opencover"
      #     .\.sonar\scanner\dotnet-sonarscanner end   /d:sonar.login="${{ secrets.SONAR_TOKEN }}"

      - name: Build and push image
        if: github.ref_name == 'main'
        run: |
          echo   "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u fortunen --password-stdin
          docker build . --build-arg BUILD_NUMBER=${{ env.BUILD_NUMBER }} --tag ${{ env.REGISTRY_IMAGE }}:latest --tag ${{ env.REGISTRY_IMAGE }}:${{ env.BUILD_NUMBER }}
          docker image push --all-tags ${{ env.REGISTRY_IMAGE }}
          sudo   curl -o $HOME/.docker/cli-plugins/docker-pushrm https://github.com/christian-korneck/docker-pushrm/releases/download/v1.9.0/docker-pushrm_linux_amd64 
          sudo   chmod  +x $HOME/.docker/cli-plugins/docker-pushrm
          docker pushrm ${{ env.REGISTRY_IMAGE }} --file README.md